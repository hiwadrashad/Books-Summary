current page: 99

WSO2 Data Service Server = exposes data from different resources

WSO2 Message Broker = uses the publish/subscribe model to send messages to different parts

WSO2 Business Process Server = bussiness process engine, stands for higher level of abstraction called BPM (Bussiness Process Management)
which stands for discover, model, analyze, measure, improve and optimize business strategy and processes.

WSO2 has also the UDDI registry called WSO2 Governance Registry, 

WSO2 Application Server is a Java application container for web applications also called Carbon Platform

UDDI is often compared to a telephone book's white, yellow, and green pages. The project allows businesses to list themselves by name, product, location, or the Web services they offer. Microsoft, IBM, and Ariba spearheaded UDDI. The project now includes 130 companies,

the latest component called WSO2 EI 6 is an all encompasing version of WSO2 in which all the services are encapsulated in this.

Wso2 Update Manage is preferred way to update and install applications, can be done manually too

WSO2 EI consists of:

- WSO2 ESB
- WSO2 DataService Server
- WSO2 Application Server
- WSO2 Analytics
- WSO2 Business PRocess
- WSO2 Message Broker

in here the first three are combined in one group also called WSO2 EI

- to make use of EI you need to install the java jdk environment variable to the bin

- WUM is the Wso2 Update Manager which allows you to update and install apps, now depricated and replaced by WSO2 updater 2.0

- to start the EI you should go to <WSO2EI_Home>/bin this is the installation folder  C:\Program Files\WSO2\EnterpriseIntegrator\6.6.0\  and execute the following commands
on linux sh integrator.sh
on windows integrator.bat --run

- Management Console URL = https://192.168.0.163:8243/carbon for people which want to access it from the internet, from the host of the Enterprise Integrator it should be differen it should be localhost dependant on the version e.g:

WSO2 EI 6.0.0 : https://localhost:8243/carbon

WSO2 EI 6.1.0 : https://localhost:9443/carbon

EI has a standard certificate for the https request which is not signed yet but good enough for test purposes

the default username and password are : admin

to stop the EI do the following:

- windows: type ctrl+C

- linux sh integrator.sh stop

- to start analytics go in the command prompt to <EI_HOME>/wso2/analytics/bin

- type in sh integrator.sh or integrator.bat --run dependant on the environment

- same thing with the url but with a different port e.g: https://localhost:9444/carbon

- sign in with the admin credentials

- closing is the same way as with the EI

- for the WSO2 EI Business Process you need to start it by going with the command prompt to 
<EI_HOME>/wso2/business-process/bin

- the starting command differs as this is sh.wso2server.sh on linux and wso2server.bat for windows

- the port differs for this program as this is https://localhost:9445/carbon

- sign in with the admin credentials

- to start the WSO2 Broker go to  <EI_HOME>/wso2/broker/bin in the console

- to start the server run the commands sh.wso2server.sh for linux
and wso2server.bat for 

- the url https://localhost:9446/carbon is the general url you will get

- to close you can type ctrl c for windows or sh wso2server.sh from the given location

- to start all four components go via the command prompt to <EI_HOME>/bin directory
type in the following for Linux shstart-all.sh and for windows shooce start-all.bat
all the processes will have  a 10 second gap inbetween the starting of it

- transports are like enabling to process files or send mails,
we can enable these transports in the axis2.xml file which recides in <EI_HOME>/conf/axis2/axis2.xml
the input transports are transportReciever XML tag while the output transports are named transportSender

-Message formatters and Message builders allow us to send and recieve different types of messages
the Message builder is meant to process incoming messages
and the message formatter are used to build outgoing messages
we can change the settings in the axis2 file, most configurations are already given but commented out
it may look like this 
<messageformatter contenttype="application/json" class="org.apache.axis2.json.JSONMessageFormatter"></messageformatter>

- projects are also called carbon projects

- the following three have all their own project structure, called ESB enterprise Service Bys,DSS Data Services and BPS Business Process Server

most used projects are:
- ESBConfig = has all the artifacts related to the functionality of an ESB
- Registry Resource Project = contains XSLT's WSLD ,XSD and and more
- Data Service Project = needed when data needs to be stored and analyzed
- Composite application project = this genereates the deployable artifacts, it allows you to select which artifacts would get added to the composite application Project that will be deployed
- ESB Solution Project = wizard allows to create commmon projects 

when a new ESb projects is created you can choose to choose the next artifacts.
- Proxy service = this is to create any service different from the REST services like SOAP and JMS(Java Message Serice)
- REST API: to create REST API's
- Sequences: allow us to structure service flow in little pieces so the code will be more readable
- Endpoints: the destination we can send messages to

- when creating aproxy you can fill in the name and types as following:
- Pass Trough Proxy: the service sends information to the endpoint without any processing, has a generic WSDL
- Custom Proxy:choose this if all the other templates do not coincide
- transform Proxy: transforms message to XSL(Extensible Stylesheet Language), can be done during income flow or prior to sending to the backend
-Log Forward Proxy: same as pass trough proxy but with the option to log the message sent and recieved
- WSDL Based Proxy: like pass trough proxy but it allows you to set the WSDL for it 
- Secure Proxy: like pass trough proxy but with the ability to secure it using a secure policy

- a proxy has three parts:
 - in flow sequence = we place logic that processes incoming messages
 - out flow sequence = logic for outcoming messages, these are the responses recieved from an endpoint
 - Fault flow sequence - Here, we implement the behavior that would be triggered during the flow

 - when creating a REST API you have the next options:
  - name = naming of the API
  - Context = root context e.g nnv will be http://localhost:8280/nnv, it must start with /
  - Host name = filters host which can invoke the API, when empty everyone can use it
  - Save location: choose the ESBPRoject in which it is stored

- REST API's have the same structure as proxyies, as they have in, out and fault sequences

- To Create a Sqeuence you can click on the Sequence map and create it
the mandatory options are the name and project to save in

- the advanced options exist of:
 - Error Sequence = shows which sequence should be executed during an error, if not chosen the proxy which uses this sequence will be executed
 - Available Endpoints = select a default endpoint to send the message.
 - Dynamix sequence, this option allows the sequence will be stored in the registry, which of two locations are possible, the Configuration and Governance map
configuration are shared by all WSO2 nodes in a cluster and the governance aer shared by all wso2 products of our environment

when creating an endpoint you have the option to fill in the following
- name = name
- type = type of endpoint choses, mostly used is the Address Endpoint
- static vs dynamic= dynamic stores endpoint in the registry
- save = where to save

- Registry Resource = provides useful functionality scuh as message validation or XSL transformation
- WSDL and XML Schema Definition files require the proxy WSDL to be uploaded to the registry

- when adding a new resource we have multiple options:
 - from existing template: this helps us to create a resource starting from a WSDL or XSD template
 - import from the system: this is for when you have the resource already or given
 - Import registry dump file from file system: this will load package with the registry content, only when you don't have e.g: acces to the product registry
 - Check-out from registry : this option allows you to connect the registry over which you will run your service so that you can work with the target directly

 - when adding a resource from an existing template you must follow the following
  - Resource Name: Name
  - Templates: most commonly used are WSDL,XSD and XSL
  - Registry: choose gov or conf 
  - Registry path: here we type the path
  - save resource in: here we hoose a Registry project to save the resources in

 - when import from file system is chosen:
  - the given options are the next:
  - from file: here we can browse to a file or folder
  - Artifact name: Name
  - Registry: choose conf or gov
  - Registry path to deploy: folder where the resource will be located
  - Save resource in: here we choose the Registry Project where we add the resources


- Data Service Project allows you to talk to multiple data sources
to create it click on Data Service PRoject at the starting page and fill in all the necessary information 
- Data Service Name: name
- Data Service Group: can be left blank, is used for grouping data services
- Data Service Namespace: Namespace
- Description: Description
- Save Data Service in : where to store data service
- click next
- Data Source Id: the name
- Data Source Type: most used is Carbon Data Source
- Data Source Name: name of the data source

- Composite Application Project will used to generate deployable artifacts, can check which artifacts inside the same workspace to combine into the Carbon Application aRchive (CAR)

- double click on pom.xml to check the artifacts which you want to deploy

- under the dependencies bar you can choose the server role, default is Governance Registry when governance registry is not used set the role as EnterpriseServiceBus

- the car file can be deployed to the server by opening WSO2EI managament console/dashboard go to Main under Carbon Applications add the car file inside the console you can see if it was succesfull or not

